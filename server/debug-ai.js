// /server/debug-ai.js
require('dotenv').config();
const { GoogleGenerativeAI } = require('@google/generative-ai');

async function listMyModels() {
    try {
        console.log("ƒêang k·∫øt n·ªëi t·ªõi Google AI v·ªõi API Key c·ªßa b·∫°n...");
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        
        console.log("ƒêang l·∫•y danh s√°ch c√°c model m√† b·∫°n c√≥ quy·ªÅn truy c·∫≠p...");
        
        // ƒê√¢y l√† h√†m quan tr·ªçng ƒë·ªÉ l·∫•y danh s√°ch models
        const models = await genAI.listModels();
        
        console.log("\n--- DANH S√ÅCH C√ÅC MODEL KH·∫¢ D·ª§NG CHO B·∫†N ---");
        let foundCompatibleModel = false;
        for await (const m of models) {
            // Ch·ªâ in ra c√°c model h·ªó tr·ª£ ch·ª©c nƒÉng `generateContent`
            if (m.supportedGenerationMethods.includes("generateContent")) {
                console.log('‚úÖ Model Name:', m.name);
                foundCompatibleModel = true;
            }
        }
        console.log("----------------------------------------------\n");

        if (!foundCompatibleModel) {
            console.log("üî¥ Kh√¥ng t√¨m th·∫•y model n√†o t∆∞∆°ng th√≠ch. V·∫•n ƒë·ªÅ c√≥ th·ªÉ do d·ª± √°n Google Cloud c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh thanh to√°n (billing) ho·∫∑c khu v·ª±c (region) kh√¥ng h·ªó tr·ª£.");
        } else {
             console.log("üü¢ G·ª£i √Ω: H√£y sao ch√©p m·ªôt trong c√°c 'Model Name' ·ªü tr√™n (v√≠ d·ª•: 'models/gemini-1.0-pro-latest') v√† d√πng n√≥ trong file api.controller.js.");
        }

    } catch (error) {
        console.error("\n‚ùå L·ªñI NGHI√äM TR·ªåNG KHI K·∫æT N·ªêI:", error.message);
        console.log("G·ª£i √Ω: Vui l√≤ng ki·ªÉm tra l·∫°i GEMINI_API_KEY trong file .env, ho·∫∑c ƒë·∫£m b·∫£o b·∫°n ƒë√£ 'ENABLE' Gemini API trong Google Cloud Console.");
    }
}

listMyModels();