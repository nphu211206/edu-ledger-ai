// File: server/index.js
// PHI√äN B·∫¢N T·ªêI TH∆Ø·ª¢NG - ƒê√É S·ª¨A L·ªñI PathError

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { poolPromise } = require('./config/db');

// --- Import c√°c nh√°nh route ---
// (Gi·ªØ nguy√™n c√°c import routes)
const authRoutes = require('./routes/auth.routes');
const publicApiRoutes = require('./routes/publicApi.routes');
const userApiRoutes = require('./routes/user.routes');
const profileRoutes = require('./routes/profile.routes');
const jobsApiRoutes = require('./routes/jobs.routes');
const companyManagementRoutes = require('./routes/company.management.routes');
const applicationsRoutes = require('./routes/applications.routes');
const app = express();
const PORT = process.env.PORT || 3800;

// --- C·∫•u h√¨nh CORS (R·∫•t quan tr·ªçng - ƒê·∫∑t tr∆∞·ªõc m·ªçi th·ª© kh√°c) ---
const allowedOrigins = ['http://localhost:3001']; // Ch·ªâ client n√†y ƒë∆∞·ª£c ph√©p
const corsOptions = {
    origin: function (origin, callback) {
        // Cho ph√©p c√°c request kh√¥ng c√≥ origin (VD: Postman, mobile apps) ho·∫∑c t·ª´ c√°c origin trong danh s√°ch
        if (!origin || allowedOrigins.indexOf(origin) !== -1) {
            console.log(`CORS allowed origin: ${origin || 'N/A'}`); // Log origin ƒë∆∞·ª£c ch·∫•p nh·∫≠n
            callback(null, true);
        } else {
            console.error(`CORS blocked origin: ${origin}`); // Log origin b·ªã ch·∫∑n
            callback(new Error(`Origin '${origin}' not allowed by CORS`)); // Th√¥ng b√°o l·ªói r√µ r√†ng h∆°n
        }
    },
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'], // Cho ph√©p c√°c method c·∫ßn thi·∫øt (th√™m PATCH)
    allowedHeaders: ['Content-Type', 'Authorization'], // C√°c header ƒë∆∞·ª£c ph√©p
    credentials: true, // Quan tr·ªçng n·∫øu frontend c·∫ßn g·ª≠i cookie ho·∫∑c Authorization header
    optionsSuccessStatus: 204 // Tr·∫£ v·ªÅ 204 No Content cho preflight requests th√†nh c√¥ng
};

// *** √ÅP D·ª§NG CORS MIDDLEWARE CHO T·∫§T C·∫¢ C√ÅC REQUEST ***
// N√≥ s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω OPTIONS (preflight) requests.
app.use(cors(corsOptions));

// --- Middleware C∆° b·∫£n ---
app.use(express.json({ limit: '1mb' })); // Middleware ƒë·ªÉ parse JSON body, gi·ªõi h·∫°n k√≠ch th∆∞·ªõc payload
app.use(express.urlencoded({ extended: true, limit: '1mb' })); // Middleware ƒë·ªÉ parse URL-encoded body

// --- Middleware Logging Request (T√πy ch·ªçn nh∆∞ng h·ªØu √≠ch) ---
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl}`);
    next();
});
app.get('/', (req, res) => {
    res.status(200).json({
        message: 'üöÄ EduLedger AI API is soaring!',
        status: 'OK',
        timestamp: new Date().toISOString(),
        documentation: '/api-docs' // G·ª£i √Ω: Sau n√†y c√≥ th·ªÉ th√™m trang t√†i li·ªáu API
    });
});

// --- G·∫Øn c√°c Nh√°nh Route Ch√≠nh ---
// Th·ª© t·ª± g·∫Øn route c√≥ th·ªÉ quan tr·ªçng n·∫øu c√≥ path tr√πng l·∫∑p (nh∆∞ng c√°c prefix ƒë√£ kh√°c nhau)
app.use('/auth', authRoutes);                   // Prefix: /auth/...
app.use('/api/public', publicApiRoutes);        // Prefix: /api/public/...
app.use('/api/user', userApiRoutes);            // Prefix: /api/user/... (Protected)
app.use('/api/profile', profileRoutes);         // Prefix: /api/profile/... (Protected)
app.use('/api/jobs', jobsApiRoutes);            // Prefix: /api/jobs/... (POST protected)
app.use('/api/company-management', companyManagementRoutes); // Prefix: /api/company-management/... (Protected)
app.use('/api/applications', applicationsRoutes); // G·∫Øn route m·ªõi
// --- X·ª≠ l√Ω Route kh√¥ng kh·ªõp (404 Not Found) ---
// ƒê·∫∑t sau t·∫•t c·∫£ c√°c route h·ª£p l·ªá
app.use((req, res, next) => {
    res.status(404).json({ message: `Endpoint not found: ${req.method} ${req.originalUrl}` });
});

// --- Middleware X·ª≠ l√Ω L·ªói Cu·ªëi c√πng (Error Handler) ---
// Ph·∫£i c√≥ 4 tham s·ªë (err, req, res, next) ƒë·ªÉ Express nh·∫≠n di·ªán l√† Error Handler
app.use((err, req, res, next) => {
    console.error("‚ùå Unhandled Application Error:", err.stack || err);

    // X·ª≠ l√Ω l·ªói CORS ƒë·∫∑c bi·ªát n·∫øu middleware cors() n√©m l·ªói
    if (err.message.includes('not allowed by CORS')) {
        return res.status(403).json({ message: err.message || 'Access denied by CORS policy.' });
    }

    // C√°c l·ªói kh√°c tr·∫£ v·ªÅ 500 Internal Server Error
    res.status(err.status || 500).json({
        message: err.message || 'Internal Server Error',
        // Ch·ªâ g·ª≠i stack trace trong m√¥i tr∆∞·ªùng development
        stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
});

// --- Kh·ªüi ƒë·ªông Server ---
const startServer = async () => {
    try {
        console.log("Attempting to connect to database...");
        await poolPromise; // ƒê·∫£m b·∫£o k·∫øt n·ªëi CSDL th√†nh c√¥ng
        console.log("Database connection successful.");

        app.listen(PORT, '0.0.0.0', () => { // L·∫Øng nghe tr√™n m·ªçi IP address c·ªßa m√°y ch·ªß
            console.log(`üöÄ EduLedger AI Server (T·ªëi Th∆∞·ª£ng - Fixed) –≤–∑–ª–µ—Ç–µ–ª –∏ –≥–æ—Ç–æ–≤ –∫ –±–æ—é –Ω–∞ http://localhost:${PORT}`);
            console.log(`‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ CORS: ${allowedOrigins.join(', ')}`);
            console.log(`Node.js version: ${process.version}`);
            console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
        });
    } catch (error) {
        console.error('‚ùå CRITICAL SERVER STARTUP FAILED.', error);
        process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu kh√¥ng th·ªÉ kh·ªüi ƒë·ªông
    }
};

startServer(); // G·ªçi h√†m kh·ªüi ƒë·ªông

console.log("‚úÖ server/index.js (T·ªëi Th∆∞·ª£ng - Fixed) loaded.");